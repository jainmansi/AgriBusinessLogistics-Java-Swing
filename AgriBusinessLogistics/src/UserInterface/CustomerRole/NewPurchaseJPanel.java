/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.CustomerRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.SupplyChainEnterprise;
import Business.Inventory.InventoryItem;
import Business.Network.Network;
import Business.Order.MasterOrderCatalog;
import Business.Order.Order;
import Business.Order.OrderItem;
import Business.Organization.Organization;
import Business.Organization.RetailerOrganization;
import Business.Sensors.RFID;
import Business.UserAccount.UserAccount;
import Business.Utils.MyPositiveIntegerVerifier;
import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Queue;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class NewPurchaseJPanel extends javax.swing.JPanel {

    /**
     * Creates new form NewPurchaseJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount account;
    private Network network;
    boolean isCheckedOut = false;
    private MasterOrderCatalog masterOrderCatalog;
    private EcoSystem business;
    Order order;

    public NewPurchaseJPanel(JPanel userProcessContainer, UserAccount account, Network network, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.network = network;
        this.business = business;
        populateRetailerComboBox();
        int min = 0;
        int max = 1000;
        int step = 1;
        int initValue = 1;
        SpinnerModel model = new SpinnerNumberModel(initValue, min, max, step);
        quantitySpinner.setModel(model);
        MyPositiveIntegerVerifier myPositiveIntegerVerifier = new MyPositiveIntegerVerifier();
        quantitySpinner.setInputVerifier(myPositiveIntegerVerifier);
    }

    public void populateRetailerComboBox() {
        retailerComboBox.removeAllItems();
        for (Enterprise ent : network.getEnterpriseDirectory().getEnterpriseList()) {
            if (ent instanceof SupplyChainEnterprise) {
                for (Organization org : ent.getOrganizationDirectory().getOrganizationList()) {
                    if (org instanceof RetailerOrganization) {
                        for (UserAccount ua : org.getUserAccountDirectory().getUserAccountList()) {
                            retailerComboBox.addItem(ua);
                        }
                    }
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        retailerProductTable = new javax.swing.JTable();
        retailerComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        quantitySpinner = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        buyBtn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        priceTxtField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        qtyTxtField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        totalTxtField = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setFont(new java.awt.Font("Trebuchet MS", 3, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 51, 51));
        jLabel2.setText("Make A New Purchase");

        retailerProductTable.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        retailerProductTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Name", "Availability"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(retailerProductTable);
        if (retailerProductTable.getColumnModel().getColumnCount() > 0) {
            retailerProductTable.getColumnModel().getColumn(0).setResizable(false);
            retailerProductTable.getColumnModel().getColumn(1).setResizable(false);
        }

        retailerComboBox.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        retailerComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retailerComboBoxActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel1.setText("Retailer:");

        quantitySpinner.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        quantitySpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                quantitySpinnerStateChanged(evt);
            }
        });
        quantitySpinner.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                quantitySpinnerKeyPressed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel4.setText("Quantity:");

        backBtn.setBackground(new java.awt.Color(51, 51, 51));
        backBtn.setFont(new java.awt.Font("Trebuchet MS", 3, 12)); // NOI18N
        backBtn.setForeground(new java.awt.Color(255, 255, 255));
        backBtn.setText("<< Back");
        backBtn.setBorder(new javax.swing.border.MatteBorder(null));
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        buyBtn.setBackground(new java.awt.Color(51, 51, 51));
        buyBtn.setFont(new java.awt.Font("Trebuchet MS", 3, 12)); // NOI18N
        buyBtn.setForeground(new java.awt.Color(255, 255, 255));
        buyBtn.setText("Make Purchase");
        buyBtn.setBorder(new javax.swing.border.MatteBorder(null));
        buyBtn.setEnabled(false);
        buyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyBtnActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Bill", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Trebuchet MS", 1, 14), new java.awt.Color(255, 0, 0))); // NOI18N

        jLabel3.setText("Price per Item:");

        priceTxtField.setEditable(false);
        priceTxtField.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N

        jLabel5.setText("Quantity Selected:");

        qtyTxtField.setEditable(false);
        qtyTxtField.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N

        jLabel6.setText("Total Bill:");

        totalTxtField.setEditable(false);
        totalTxtField.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5)
                    .addComponent(jLabel3))
                .addGap(57, 57, 57)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(priceTxtField)
                    .addComponent(qtyTxtField)
                    .addComponent(totalTxtField, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE))
                .addGap(25, 25, 25))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(priceTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(qtyTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(202, 202, 202))
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(216, 216, 216)
                            .addComponent(jLabel1)
                            .addGap(30, 30, 30)
                            .addComponent(retailerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(198, 198, 198)
                            .addComponent(jLabel2))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(247, 247, 247)
                            .addComponent(jLabel4)
                            .addGap(27, 27, 27)
                            .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGap(256, 256, 256)))
            .addGroup(layout.createSequentialGroup()
                .addGap(129, 129, 129)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(104, 104, 104)
                        .addComponent(buyBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 441, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(63, 63, 63))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(retailerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(17, 17, 17)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buyBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(41, 41, 41))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed

    private void retailerComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retailerComboBoxActionPerformed
        populateProductTable();
    }//GEN-LAST:event_retailerComboBoxActionPerformed

    private void buyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyBtnActionPerformed
        int selectedRow = retailerProductTable.getSelectedRow();
        UserAccount retailer = (UserAccount) retailerComboBox.getSelectedItem();
        InventoryItem selectedProduct;
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Select a row", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            selectedProduct = (InventoryItem) retailerProductTable.getValueAt(selectedRow, 0);
        }
        int fetchedQty = (Integer) quantitySpinner.getValue();
        if (fetchedQty <= 0) {
            JOptionPane.showMessageDialog(this, "Selected at least 1 quantity", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (fetchedQty > selectedProduct.getQuantity()) {
            JOptionPane.showMessageDialog(this, "Quantity > Availability!!", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            Order order = new Order();
            order.setBuyer(account);
            order.setSeller(retailer);
            order.setType("c2r");
            String date = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss").format(new Date());
            order.setDate(date);
            //network.getMasterOrderCatalog().addOrder(order);

            for (InventoryItem rii : retailer.getInventory().getInventoryList()) {
                if (rii.getProduct().getName().equals(selectedProduct.getProduct().getName())) {
                    OrderItem oi = order.addOrderItem(selectedProduct.getProduct(), fetchedQty);
                    for(int i = 0; i < fetchedQty; i++){
                        RFID rfid = rii.getRfid().remove();
                        rfid.setCustomer(account);
                        rfid.setRetailer(retailer);
                        rfid.setProductSoldDate(date);
                        oi.getRfid().add(rfid);
                    }
                    rii.setQuantity(rii.getRfid().size());
                }
            }
            network.getMasterOrderCatalog().addOrder(order);
            refreshOrderTable();
        }    
    }

    public void refreshOrderTable() {
        populateProductTable();
    }//GEN-LAST:event_buyBtnActionPerformed

    private void quantitySpinnerKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quantitySpinnerKeyPressed
        
        generateBill();
    }//GEN-LAST:event_quantitySpinnerKeyPressed

    public void generateBill(){
        int selectedRow = retailerProductTable.getSelectedRow();
        InventoryItem selectedProduct;
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Select a row", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            selectedProduct = (InventoryItem) retailerProductTable.getValueAt(selectedRow, 0);
        }
        int fetchedQty = (Integer) quantitySpinner.getValue();
        if (fetchedQty <= 0) {
            JOptionPane.showMessageDialog(this, "Selected at least 1 quantity", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (fetchedQty > selectedProduct.getQuantity()) {
            JOptionPane.showMessageDialog(this, "Quantity > Availability!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        
        int price =selectedProduct.getProduct().getPrice();
        int qty =fetchedQty;
        int total = price * qty;
        priceTxtField.setText(String.valueOf(selectedProduct.getProduct().getPrice()));
        qtyTxtField.setText(String.valueOf(fetchedQty));
        totalTxtField.setText(String.valueOf(total));
        buyBtn.setEnabled(true);
    }
    private void quantitySpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_quantitySpinnerStateChanged
        generateBill();
    }//GEN-LAST:event_quantitySpinnerStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JButton buyBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField priceTxtField;
    private javax.swing.JTextField qtyTxtField;
    private javax.swing.JSpinner quantitySpinner;
    private javax.swing.JComboBox retailerComboBox;
    private javax.swing.JTable retailerProductTable;
    private javax.swing.JTextField totalTxtField;
    // End of variables declaration//GEN-END:variables

    private void populateProductTable() {
        DefaultTableModel dtm = (DefaultTableModel) retailerProductTable.getModel();
        UserAccount ua = (UserAccount) retailerComboBox.getSelectedItem();
        dtm.setRowCount(0);
        if (ua != null) {
            for (InventoryItem ii : ua.getInventory().getInventoryList()) {
                Object row[] = new Object[2];
                row[0] = ii;
                row[1] = ii.getQuantity();
                dtm.addRow(row);
            }
        }
    }
}
